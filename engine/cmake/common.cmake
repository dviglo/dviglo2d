# –ê–Ω–∞–ª–æ–≥ #pragma once
include_guard(GLOBAL)

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–Ω–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
# –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞
if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
    # —Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç Release
    set(CMAKE_BUILD_TYPE Release)

    # –ù–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é CMAKE_BUILD_TYPE –ø—É—Å—Ç–æ–π,
    # —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –±—É–¥—É—Ç –∑–∞–¥–∞–Ω—ã —Ñ–ª–∞–≥–∏ GCC –∏ MinGW:
    # * –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: CXX_FLAGS = -std=c++20
    # * Release: CXX_FLAGS = -O3 -DNDEBUG -std=c++20
    # * Debug: CXX_FLAGS = -g -std=c++20
    # * RelWithDebInfo: CXX_FLAGS = -O2 -g -DNDEBUG -std=c++20
    # * MinSizeRel: CXX_FLAGS = -Os -DNDEBUG -std=c++20
    # –§–ª–∞–≥–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ñ–∞–π–ª–µ build/source/dviglo/CMakeFiles/dviglo.dir/flags.make
endif()

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ–± in-source build
if(CMAKE_BINARY_DIR MATCHES "^${CMAKE_SOURCE_DIR}")
    message(WARNING "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –≤ –ø–∞–ø–∫–µ —Å –∏—Ö–æ–¥–Ω–∏–∫–∞–º–∏ - –ø–ª–æ—Ö–∞—è –∏–¥–µ—è")
endif()

# –í—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
get_cmake_property(CACHE_VARS CACHE_VARIABLES)
foreach(cache_var ${CACHE_VARS})
    get_property(CACHE_VAR_HELPSTRING CACHE ${cache_var} PROPERTY HELPSTRING)

    if(CACHE_VAR_HELPSTRING STREQUAL "No help, variable specified on the command line.")
        get_property(cache_var_type CACHE ${cache_var} PROPERTY TYPE)

        if(cache_var_type STREQUAL "UNINITIALIZED")
            set(cache_var_type)
        else()
            set(cache_var_type ":${cache_var_type}")
        endif()

        set(cmake_args "${cmake_args} -D ${cache_var}${cache_var_type}=\"${${cache_var}}\"")
    endif ()
endforeach ()
message(STATUS "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:${cmake_args}")

# –í–µ—Ä—Å–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ C++
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# –£–∫–∞–∑—ã–≤–∞–µ–º –°—Ç—É–¥–∏–∏ –Ω–∞ —Ç–æ, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–∏—Å–∞—Ç—å U'üçå'. –£ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–≤, –ø–æ—Ö–æ–∂–µ, –Ω–µ—Ç —Å —ç—Ç–∏–º –ø—Ä–æ–±–ª–µ–º.
# https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2295r6.pdf
if(MSVC)
    add_compile_options(/utf-8)
endif()

# –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–∞–ø–æ–∫ –≤ IDE
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# –í–∫–ª—é—á–∞–µ–º –æ–ø—Ü–∏—é /MT –¥–ª—è –≤—Å–µ—Ö —Ç–∞—Ä–≥–µ—Ç–æ–≤
set(CMAKE_POLICY_DEFAULT_CMP0091 NEW)
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

# ==================== –û–ø—Ü–∏–∏ –¥–≤–∏–∂–∫–∞ ====================

# –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∞–∫—Ä–æ—Å—É cmake_dependent_option
include(CMakeDependentOption)

option(DV_CTEST "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ CTest" FALSE)
cmake_dependent_option(DV_WIN32_CONSOLE "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å main(), –∞ –Ω–µ WinMain()" FALSE "WIN32" FALSE) # –ù–µ –Ω–∞ Windows –≤—Å–µ–≥–¥–∞ FALSE

if(DV_CTEST)
    enable_testing() # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–º CMakeLists.txt
endif()

# ==================== –£—Ç–∏–ª–∏—Ç—ã ====================

# –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å CMakeLists.txt.
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: dv_add_all_subdirs() –∏–ª–∏ dv_add_all_subdirs(EXCLUDE_FROM_ALL)
function(dv_add_all_subdirs)
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–¥–ø–∞–ø–æ–∫
    file(GLOB children RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *)

    foreach(child ${children})
        # –ï—Å–ª–∏ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if(NOT IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${child})
            continue()
        endif()

        # –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ –Ω–µ—Ç CMakeLists.txt, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${child}/CMakeLists.txt)
            continue()
        endif()

        # –§—É–Ω–∫—Ü–∏—è dv_add_all_subdirs() –æ–∂–∏–¥–∞–µ—Ç 0 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
        # –í—Å–µ –ª–∏—à–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ ARGN
        add_subdirectory(${child} ${ARGN})
    endforeach()
endfunction()

# –°–æ–∑–¥–∞—ë—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø–∞–ø–∫–∏. –ï—Å–ª–∏ —Å—Å—ã–ª–∫—É —Å–æ–∑–¥–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, —Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É
function(dv_create_dir_link from to)
    if(NOT CMAKE_HOST_WIN32)
        execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink ${from} ${to}
                        OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE RESULT)
    else()
        # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º create_symlink –≤ Windows, —Ç–∞–∫ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–∏–µ symbolic links
        # [—Ç—Ä–µ–±—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤](https://ss64.com/nt/mklink.html),
        # –∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ junctions –∏–∑ CMake
        # [–±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞](https://gitlab.kitware.com/cmake/cmake/-/merge_requests/7530)
        string(REPLACE / \\ from ${from})
        string(REPLACE / \\ to ${to})
        execute_process(COMMAND cmd /C mklink /J ${to} ${from}
                        OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE RESULT)
    endif()

    if(NOT RESULT EQUAL 0)
        # –ü—Ä–∏—á–∏–Ω–æ–π –Ω–µ—É–¥–∞—á–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è PATH, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç %SystemRoot%\system32
        message("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–∞–ø–∫–∏, –ø–æ—ç—Ç–æ–º—É –∫–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É")
        execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory  ${from} ${to})
    endif()
endfunction()

# –ö—É–¥–∞ –±—É–¥—É—Ç –ø–æ–º–µ—â–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–∫–∑–µ—à–Ω–∏–∫–∏ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
# –§—É–Ω–∫—Ü–∏—é –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞—Ä–≥–µ—Ç–æ–≤
function(dv_set_bin_dir bin_dir)
    # –î–ª—è –æ–¥–Ω–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ (MinGW)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${bin_dir} PARENT_SCOPE)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${bin_dir} PARENT_SCOPE)

    # –î–ª—è –º–Ω–æ–≥–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ (Visual Studio)
    foreach(config_name ${CMAKE_CONFIGURATION_TYPES})
        string(TOUPPER ${config_name} config_name)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${config_name} ${bin_dir} PARENT_SCOPE)
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${config_name} ${bin_dir} PARENT_SCOPE)
    endforeach()
endfunction()

# –ü–æ—Å–ª–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∫–æ–ø–∏—Ä—É–µ—Ç dll-–∫–∏ –∫ —ç–∫–∑–µ—à–Ω–∏–∫—É
function(dv_copy_shared_libs_to_bin_dir exe_target_name)
    if(MINGW)
        # dll-–∫–∏ MinGW –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ä—è–¥–æ–º —Å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º, –ø–æ—ç—Ç–æ–º—É –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É
        execute_process(COMMAND where x86_64-w64-mingw32-gcc.exe
                        OUTPUT_VARIABLE mingw_fullpath)

        # –ö–æ–º–∞–Ω–¥–∞ where –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, –µ—Å–ª–∏ MinGW —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ä–∞–∑–Ω—ã–µ –º–µ—Å—Ç–∞.
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω—É–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
        string(REPLACE "\n" ";" mingw_fullpath ${mingw_fullpath})
        list(GET mingw_fullpath 0 mingw_fullpath)

        cmake_path(GET mingw_fullpath PARENT_PATH mingw_dir)

        set(dlls ${mingw_dir}/libgcc_s_seh-1.dll
                 ${mingw_dir}/libstdc++-6.dll
                 ${mingw_dir}/libwinpthread-1.dll)

        add_custom_command(TARGET ${exe_target_name} POST_BUILD
                           COMMAND ${CMAKE_COMMAND} -E copy_if_different ${dlls} $<TARGET_FILE_DIR:${exe_target_name}>
                           COMMAND_EXPAND_LISTS)
    endif()
endfunction()
